// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int             @id @default(autoincrement())
  created_at  DateTime        @default(now())
  updated_at  DateTime?       @updatedAt
  name        String
  description String
  price       Int             @default(1)
  stock       Int             @default(1)
  highlighted Boolean         @default(false)
  variants    ProducVariant[]
  category    Category?       @relation(fields: [categoryId], references: [name])
  categoryId  String?
  images      Image[]
  orders      OrderProduct[]
}

model ProducVariant {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String
  price     Int
  stock     Int
  productId Int
  product   Product?  @relation(fields: [productId], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  name      String    @unique
  parent    Category? @relation("ChildCategories", fields: [parentId], references: [id])
  parentId  Int?
  products  Product[]

  subcategories Category[] @relation("ChildCategories")
}

model Image {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  url       String
  productId Int
  product   Product   @relation(fields: [productId], references: [id])
}

model Order {
  id         Int            @id @default(autoincrement())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime?      @updatedAt
  name       String
  address    String
  phone      String         @db.VarChar(20)
  total      Float
  user       User?          @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderProduct[]
}

model OrderProduct {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  product   Product   @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order     @relation(fields: [orderId], references: [id])
  productId Int
  fulfilled Boolean   @default(false)
}

//  ---auth---
enum Role {
  USER
  ADMIN
}

model User {
 id String @id @default(cuid()) @db.VarChar(30)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  email         String    @unique
  emailVerified DateTime?
  password      String
  name          String
  phone         String
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  orders        Order[]
}

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
// }

//----
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
